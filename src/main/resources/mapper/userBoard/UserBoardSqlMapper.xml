<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.rm.roaming.userboard.mapper.UserBoardSqlMapper">
	<!-- 내 포인트 조회 -->
	<select id="selectMyPoint" resultType="int">
		SELECT
          SUM(CASE WHEN status = '획득' THEN point ELSE 0 END) -
          SUM(CASE WHEN status = '사용' THEN point ELSE 0 END) +
            SUM(CASE WHEN status = '환불' THEN point ELSE 0 END)
            AS total_point
      FROM point
      WHERE user_id = #{user_id}
      GROUP BY user_id
	</select>
	
	
	<!-- 내 쿠폰 수량 조회 -->
	<select id="selectMyCouponCount" resultType="int">
		SELECT COUNT(*) AS total_count
		FROM (
		    SELECT t2.*
		    FROM (
		        SELECT t1.*, ROWNUM rnum
		        FROM (
		            SELECT uc.*
		            FROM userCoupon uc
		            JOIN coupon c ON uc.coupon_id = c.id
		            WHERE uc.status = 'N'
		            AND c.coupon_deleted = 'N'
		            AND uc.user_id = #{user_id}
		            ORDER BY uc.coupon_id DESC
		        ) t1
		    ) t2
		)
	</select>
	
	
	
	<!-- 쿠폰리스트 조회 -->
	<select id="selectCouponList" resultType="com.rm.roaming.dto.CouponDto">
		SELECT *
		FROM coupon
		WHERE coupon_enddate > sysdate
		and coupon_count > 0
		and coupon_deleted = 'N'
		ORDER BY id DESC
	</select>
	
	
	<!--  내 쿠폰함 등록 -->
	<insert id="insertUserCoupon">
    INSERT INTO userCoupon VALUES(
        userCoupon_seq.nextval,
        #{user_id},
        #{coupon_id},
        'N',
        SYSDATE
    )
	</insert>
	
	<!-- 내 쿠폰함 사용가능 쿠폰 조회 -->
	<select id="selectUserCouponAll" resultType="com.rm.roaming.dto.UserCouponDto">
	<![CDATA[
		SELECT t2.* FROM (
			SELECT t1.*, ROWNUM rnum FROM(
				SELECT uc.*
					FROM userCoupon uc
					JOIN coupon c ON uc.coupon_id = c.id
					WHERE uc.status = 'N'
					  AND c.coupon_deleted = 'N'
					  AND uc.user_id = #{userId}
					ORDER BY uc.coupon_id DESC
				)t1
			)t2
		WHERE t2.rnum >= ((#{page}-1) * 3) + 1 AND t2.rnum <= #{page} * 3
		]]>
	</select>
	
	<!-- 내 쿠폰함 사용가능 쿠폰 조회 페이징 -->
	<select id="UserCouponCount" resultType="int">
		SELECT COUNT(*) FROM userCoupon
		WHERE user_id = #{userId}
	</select>
	
	<!-- 내 쿠폰함 사용완료 쿠폰 조회 -->
	<select id="selectNotExistUserCouponAll" resultType="com.rm.roaming.dto.UserCouponDto"> 
	<![CDATA[
		SELECt t2.* FROM (
			SELECT t1.*, ROWNUM rnum FROM(
				SELECT uc.*
					FROM userCoupon uc
					JOIN coupon c ON uc.coupon_id = c.id
					WHERE uc.status = 'Y'
					  OR c.coupon_deleted = 'Y'
					  AND uc.user_id = #{userId}
					ORDER BY uc.coupon_id DESC
				)t1
			)t2
		WHERE t2.rnum >= ((#{pageNum}-1) * 3) + 1 AND t2.rnum <= #{pageNum} * 3
		]]>
	</select>
	
	<!-- 내 쿠폰함 사용완료 쿠폰 조회 페이징 -->
	<select id="notExistUserCouponCount" resultType="int">
		SELECT COUNT(*) FROM userCoupon
		WHERE user_id = #{userId}
	</select>

	
	

	<!-- 상품리스트 조회 -->
	<select id="selectItemList" resultType="com.rm.roaming.dto.ItemDto">
		<choose>
			<when test="categoryId == 0">
				SELECT *
				FROM item
				ORDER BY id DESC	
			</when>
			<otherwise>
				SELECT *
				FROM item
				WHERE category_id = #{categoryId}
				ORDER BY id DESC
			</otherwise>
		</choose>			
	</select>
	
	<!-- 상품카테고리 조회 -->
	<select id="selectItemCategoryList" resultType="com.rm.roaming.dto.ItemCategoryDto">
		select * 
		from item_category
		ORDER BY id
	</select>
	
	<!-- 특정 상품 리뷰수 조회 -->
	<select id="selectReviewBuyCount" resultType="int"> 
		SELECT COUNT(*) AS total_count
		FROM Item_review
		WHERE item_buy_id IN (SELECT id FROM item_buy WHERE item_id= #{item_id})
	</select>
	
	<!-- 특정 상품 구매수 조회 -->
	<select id="selectBuyCount" resultType="int">
		SELECT COUNT(*) AS total_count
		FROM item_buy
		WHERE item_id = #{item_id}
	</select>
	
	<!-- 특정 상품 좋아요 조회 -->
	<select id="selectItemLikeCount" resultType="int">
		SELECT count(*) AS total_count
		FROM item_like
		WHERE item_id = #{item_id}
	</select>
	<!-- 특정 상품 조회 -->
	<select id="selectByItemId" resultType="com.rm.roaming.dto.ItemDto">
		SELECT  *
		FROM item
		WHERE id = #{id}
	</select>
	
	<!-- 연관 상품 -->
	<select id="selectRelationItem" resultType="com.rm.roaming.dto.ItemDto">
	<![CDATA[
		SELECT *
		FROM (
		  SELECT *
		  FROM Item
		  WHERE category_id = #{category_id}
		  ORDER BY DBMS_RANDOM.VALUE
		)
		WHERE ROWNUM <= 5
		]]>
	</select>
	
	<!-- 특정 상품 이미지 조회 -->
	<select id="selectItemImageById" resultType="com.rm.roaming.dto.ItemImageDto">
		SELECT * 
		FROM item_image
		WHERE item_id = #{id}
	</select>
	
	<!-- 배송지, 상품구매 배송지 동시 Insert -->
	<select id="createAddressPk" resultType="int">
		select user_address_seq.nextval from dual
	</select>
	
	<!-- 배송지 등록 -->
	<insert id="insertUserAddress">
		INSERT INTO user_address VALUES(
        #{id},
        #{user_id},
        #{address}
    )
	</insert>
	
	<!-- 배송지 조회 -->
	<select id="selectUserAddressId" resultType="com.rm.roaming.dto.UserAddressDto">
		SELECT *
		FROM user_address
		WHERE id = #{id}
	</select>
	
	<!-- 상품 구매 등록 -->
	<insert id="insertItemBuy">
		INSERT INTO item_buy VALUES(
        item_buy_seq.nextval,
        #{item_id},
        #{address_id},
       <if test="userCoupon_id == 0">
         NULL,
         </if>
         <if test="userCoupon_id != 0">
         #{userCoupon_id},
         </if>
        #{count},
        '결제완료',
        SYSDATE
    )
	</insert>
	<update id="updateUserCouponUseByItem">
		UPDATE userCoupon SET status ='Y' WHERE coupon_id = #{coupon_id} AND user_id=#{user_id}
	</update>
	<select id="selectUseCouponPercent" resultType="int">
		select coupon_discount from coupon where id =#{id}
	</select>
	
	<!-- 포인트 사용내역 등록 -->
	<insert id="insertPointStatus">
		INSERT INTO point (id, user_id, point, status, context, reg_date)
SELECT
    point_seq.nextval,
    #{user_id},
    i.item_price * ib.count,
    '사용',
    '구매',
    SYSDATE
FROM
    item i
    JOIN (
        SELECT *
        FROM item_buy
        ORDER BY reg_date DESC
        FETCH FIRST 1 ROW ONLY
    ) ib ON ib.item_id = i.id
WHERE
    i.id = #{id}

	</insert>
	
	<!-- 상품리뷰 등록 -->
	<insert id="insertItemReview">
		INSERT INTO item_review VALUES(
        item_review_seq.nextval,
        #{item_buy_id},
        #{context},
        #{star},
        SYSDATE
    )
	</insert>
	
	<!-- 상품구매 상태 업데이트 -->
	<update id="updateItemBuyProgress">
		UPDATE item_buy
			SET progress = '리뷰작성완료'
			WHERE id = #{id}
	</update>
	<!-- 주문내역 조회 -->
	<select id="selectByItemBuyList" resultType="com.rm.roaming.dto.ItemBuyDto">
		SELECT ib.*
			FROM item_buy ib
			JOIN user_address ua ON ib.address_id = ua.id
			WHERE ua.user_id = #{sessionUser}
			ORDER BY ib.id DESC
	</select>
	
	<!-- 상품리뷰 조회 -->
	<select id="selectByItemReviewList" resultType="com.rm.roaming.dto.ReviewJoinDto">
	SELECT ir.id, ud.user_id, ru.user_name, ir.star, ir.CONTEXT, ir.reg_date FROM item i INNER JOIN item_buy ib ON i.id = ib.item_id INNER JOIN ITEM_REVIEW ir ON ib.id = ir.item_buy_id
INNER JOIN user_address ud ON ib.address_id = ud.id INNER JOIN rm_user ru ON ru.id = ud.user_id WHERE i.id = #{id} ORDER BY ir.id desc 
	</select>
	
	<select id="selectByItemBuyId" resultType="com.rm.roaming.dto.ItemBuyDto">
		SELECT  *
		FROM item_buy
		WHERE id = #{id}
	</select>
	
	<!-- 상품구매 완료 -->
	<select id="selectByItemBuyComplete" resultType="com.rm.roaming.dto.ItemBuyDto">
		SELECT *
		FROM item_buy
		WHERE item_id = #{item_id}
		ORDER BY reg_date DESC
		FETCH FIRST 1 ROWS ONLY
	</select>
	
	      <!-- 상품에 적용할 쿠폰 -->
   <select id="selectByBuyCouponList" resultType="com.rm.roaming.dto.CouponDto">
     SELECT c.id,uc.id as coupon_count,
c.coupon_name,c.coupon_discount
      FROM coupon c
      JOIN userCoupon uc ON uc.coupon_id = c.id
      WHERE c.coupon_context = '상품'
        AND uc.status = 'N'
        AND c.coupon_deleted = 'N'
          AND user_id=#{user_id}
   </select>
   
   <update id="useCouponByItem">
      UPDATE userCoupon  SET status = 'Y' WHERE coupon_id = #{coupon_id} AND user_id = #{user_id}
   </update>
	
	
	<select id="selectUseAbleCouponCount" resultType="int">
		 SELECT
      count (*) FROM coupon c
      JOIN userCoupon uc ON uc.coupon_id = c.id
      WHERE c.coupon_context = '상품'
        AND uc.status = 'N'
        AND c.coupon_deleted = 'N'
          AND user_id= #{user_id}
	</select>
	
	
	
	
	
	
	
	<insert id="insertLike">
		INSERT INTO item_like
		VALUES(
			item_like_seq.nextval,
			#{user_id},
			#{item_id},
			SYSDATE
		)
	</insert>
	
	
	<delete id="deleteLike">
		DELETE FROM item_like
		WHERE user_id = #{user_id}
		AND item_id = #{item_id}
	</delete>
	
	<select id="countMyLike" resultType="int">
		SELECT count(*) FROM item_like
		WHERE user_id = #{user_id}
		AND item_id = #{item_id}
	</select>
	
	<select id="countLikeByItemId" resultType="int">
		SELECT count(*) FROM item_like
		WHERE item_id = #{item_id}
	</select>

	<!-- 유저별 상품 좋아요 조회 -->
	<select id="selectByItemLikeList" resultType="com.rm.roaming.dto.ItemLikeDto">
		SELECT * FROM item_like WHERE user_id = #{user_id}
	</select>


	<!-- 내 포인트 리스트 조회 -->
	<select id="selectByPointList" resultType="com.rm.roaming.dto.PointDto">
	<![CDATA[
		SELECT t2.*
		FROM (
		    SELECT t1.*, ROWNUM rnum
		    FROM (
		        SELECT p.*
		        FROM point p
		        WHERE user_id = #{user_id}
		        ORDER BY id DESC
		    ) t1
		) t2
		WHERE t2.rnum >= ((#{page}-1) * 5) + 1 AND t2.rnum <= #{page} * 5
		]]>
	</select>
	
	<!-- 내 포인트 리스트 페이징 -->
	<select id="pointPaging" resultType="int">
		SELECT COUNT(*) FROM point
	</select>
	
	<!-- 내 적립 포인트 조회 -->
	<select id="selectSaveMyPoint" resultType="int">
		SELECT NVL(SUM(p.POINT),0) FROM POINT p WHERE p.USER_ID = #{user_id} AND p.STATUS = '획득'
	</select>
	
	<!-- 내 사용 포인트 조회 -->
	<select id="selectUseMyPoint" resultType="int">
		SELECT NVL(SUM(p.POINT),0) FROM POINT p WHERE p.USER_ID = #{user_id} AND p.STATUS = '사용'
	</select>

	
	

	
	
	
	
	
	

	<select id="selectHotelCategoryByHotelCategoryId" resultType="com.rm.roaming.dto.HotelCategoryDto">
		SELECT * FROM hotel_category WHERE id = #{id}
	</select>
	<select id="selectMinPriceByHotelId" resultType="com.rm.roaming.dto.RoomGroupDto">
		SELECT COALESCE(min(price), 0) AS price
		FROM room_group
		WHERE hotel_id = #{hotel_id}
	</select>
	<select id="selectHotelListByStar" resultType="com.rm.roaming.dto.HotelDto">
	SELECT h.* 
	FROM hotel h
	<if test="orderByNumber == 1">
	LEFT JOIN (
	    SELECT rg.hotel_id, COUNT(*) AS review_count
	    FROM hotel_review hr
	    INNER JOIN reserve r ON hr.reserve_id = r.id
	    INNER JOIN room_group rg ON r.room_group_id = rg.id
	    GROUP BY rg.hotel_id
	) r ON h.id = r.hotel_id
	</if>
	<if test="orderByNumber == 2">
	LEFT JOIN (
	    SELECT rg.hotel_id, COALESCE(ROUND(avg(star), 2), 0) as star
	    FROM hotel_review hr
	    INNER JOIN reserve r ON hr.reserve_id = r.id
	    INNER JOIN room_group rg ON r.room_group_id = rg.id
	    GROUP BY rg.hotel_id
	) r ON h.id = r.hotel_id
	</if>
	<if test="orderByNumber == 3">
		INNER JOIN (
		    SELECT hotel_id, MIN(price) AS price
		    FROM room_group
		    GROUP BY hotel_id
		) rg ON h.id = rg.hotel_id
	</if>
	<if test="orderByNumber == 4">
		INNER JOIN (
		    SELECT hotel_id, MIN(price) AS price
		    FROM room_group
		    GROUP BY hotel_id
		) rg ON h.id = rg.hotel_id
	</if>
	WHERE 
	    <choose>
	        <when test="category == '전체'">
	            1=1
	        </when>
	        <otherwise>
	            h.hotel_category_id IN (SELECT id FROM hotel_category WHERE category LIKE '%' || #{category} || '%')
	        </otherwise>
	    </choose>
	    AND
	        <if test="star == 0">
	            1=1
	        </if>
	        <if test="star==2">h.hotel_category_id IN (SELECT id FROM hotel_category WHERE category LIKE '%' || '2' || '%' OR category LIKE '%' || '3' || '%' OR category LIKE '%' || '4' || '%' OR category LIKE '%' || '5' || '%')</if>
	        <if test="star==3">h.hotel_category_id IN (SELECT id FROM hotel_category WHERE category LIKE '%' || '3' || '%' OR category LIKE '%' || '4' || '%' OR category LIKE '%' || '5' || '%')</if>
	        <if test="star==4">h.hotel_category_id IN (SELECT id FROM hotel_category WHERE category LIKE '%' || '4' || '%' OR category LIKE '%' || '5' || '%')</if>
	        <if test="star==5">h.hotel_category_id = (SELECT id FROM hotel_category WHERE category LIKE '%' || '5' || '%')</if>
	    <if test="checkBoxValues != null and checkBoxValues.length > 0">
	        AND h.id IN (
	            SELECT hotel_id
	            FROM hotel_link_syscategory
	            WHERE syscategory_id IN
	                <foreach item="id" collection="checkBoxValues" open="(" separator="," close=")">
	                    #{id}
	                </foreach>
	            GROUP BY hotel_id
	            HAVING COUNT(DISTINCT syscategory_id) = ${checkBoxValues.length}
	        )
	    </if>
	    AND h.id IN (
	    <![CDATA[
		SELECT rg.hotel_id
		FROM room_group rg
		LEFT JOIN (
		    SELECT room_group_id, COUNT(*) AS reserved_rooms
		    FROM reserve
		   WHERE (start_date >=  TO_DATE(#{startDate}, 'yy/MM/dd') AND start_date < TO_DATE(#{endDate}, 'yy/MM/dd'))
   			OR (end_date > TO_DATE(#{startDate}, 'yy/MM/dd') AND end_date <= TO_DATE(#{endDate}, 'yy/MM/dd'))
		    GROUP BY room_group_id
		) r ON rg.id = r.room_group_id
		INNER JOIN (
		    SELECT room_group_id, COUNT(*) AS total_rooms
		    FROM room
		    GROUP BY room_group_id
		) rm ON rg.id = rm.room_group_id
		WHERE COALESCE(r.reserved_rooms, 0) < rm.total_rooms  AND fixed_number >= #{fixed_number}
		]]> 
	    )AND h.status ='영업'
	 <if test="loc != ''"> AND h.hotel_loc Like '%' || #{loc} || '%' </if>
	 <if test="orderByNumber == 1"> ORDER BY COALESCE(r.review_count, 0) DESC </if>
	 <if test="orderByNumber == 2"> ORDER BY COALESCE(r.star, 0) DESC </if>
	 <if test="orderByNumber == 3"> ORDER BY rg.price </if>
	 <if test="orderByNumber == 4"> ORDER BY rg.price DESC </if>
	</select>
	<select id="selectHotelInfoById" resultType="com.rm.roaming.dto.HotelDto">
		SELECT * FROM hotel WHERE id = #{id}
	</select>
	<select id="selectHotelLinkSysCategoryByHotelId" resultType="com.rm.roaming.dto.HotelLinkSyscategoryDto">
		SELECT * FROM hotel_link_syscategory WHERE hotel_id = #{hotel_id}
	</select>
	<select id="selectStarAvgByHotelId" resultType="java.lang.Double">
		SELECT COALESCE(ROUND(avg(star), 1), 0) FROM hotel_review WHERE reserve_id IN (SELECT id FROM reserve WHERE room_group_id IN (SELECT id FROM room_group WHERE hotel_id = #{hotel_id}))
	</select>
	<select id="selectStarCountByHotelId" resultType="int">
		SELECT COUNT(*) FROM hotel_review WHERE reserve_id IN (SELECT id FROM reserve WHERE room_group_id IN (SELECT id FROM room_group WHERE hotel_id = #{hotel_id}))
	</select>
	<select id="selectHotelSysCategoryById" resultType="com.rm.roaming.dto.HotelSyscategoryDto">
		SELECT * FROM hotel_syscategory WHERE id = #{id}
	</select>
	<select id="selectCustomCategoryByHotelId" resultType="com.rm.roaming.dto.CustomCategoryDto">
		SELECT * FROM custom_category WHERE room_group_id IN (SELECT id FROM room_group WHERE hotel_id = #{hotel_id})
	</select>
	<select id="selectCustomCategoryByGroupId" resultType="com.rm.roaming.dto.CustomCategoryDto">
		SELECT * FROM custom_category WHERE room_group_id = #{room_group_id}
	</select>
	<select id="selectViewList" resultType="com.rm.roaming.dto.RoomViewDto">
		SELECT * FROM room_view
	</select>
	<select id="selectViewByviewID" resultType="com.rm.roaming.dto.RoomViewDto">
		SELECT * FROM room_view WHERE id=  #{id}
	</select>
	<select id="selectRoomGroupImgByHotelId" resultType="com.rm.roaming.dto.RoomGroupImgDto">
		SELECT * FROM room_group_img WHERE room_group_id IN (SELECT id FROM room_group WHERE hotel_id=#{hotel_id})
	</select>
	<select id="selectRoomGroupByHotelId" resultType="com.rm.roaming.dto.RoomGroupDto">
		SELECT * FROM room_group WHERE hotel_id = #{hotel_id}
	</select>
	<select id="selectRoomGroupBySearch" resultType="com.rm.roaming.dto.RoomGroupDto">
	<![CDATA[
			SELECT rg.*
		FROM room_group rg
		LEFT JOIN (
		    SELECT room_group_id, COUNT(*) AS reserved_rooms
		    FROM reserve
		   WHERE (start_date >= TO_DATE(#{startDate}, 'yy/MM/dd') AND start_date < TO_DATE(#{endDate}, 'yy/MM/dd'))
   			OR (end_date > TO_DATE(#{startDate}, 'yy/MM/dd') AND end_date <= TO_DATE(#{endDate}, 'yy/MM/dd'))
		    GROUP BY room_group_id
		) r ON rg.id = r.room_group_id
		INNER JOIN (
		    SELECT room_group_id, COUNT(*) AS total_rooms
		    FROM room
		    GROUP BY room_group_id
		) rm ON rg.id = rm.room_group_id
		WHERE COALESCE(r.reserved_rooms, 0) < rm.total_rooms  AND fixed_number >= #{fixed_number} AND rg.hotel_id = #{hotel_id}
		]]> 
		<if test="view_id != 0">
		 AND view_id=#{view_id}
		</if>
	</select>
	<select id="selectRoomGroupImgByRoomGroupId" resultType="com.rm.roaming.dto.RoomGroupImgDto">
		SELECT* FROM room_group_img WHERE room_group_id = #{room_group_id}
	</select>
	
	
	<select id="selectRoomGroupById" resultType="com.rm.roaming.dto.RoomGroupDto">
		SELECT * FROM room_group WHERE id = #{id}
	</select>
	<select id="selectGroupPlusOptionByGroupId" resultType="com.rm.roaming.dto.GroupPlusOptionDto">
		SELECT * FROM group_plus_option WHERE room_group_id = #{room_group_id}
	</select>
	
	<select id="createReservePk" resultType="int">
		SELECT reserve_seq.nextval FROM dual
	</select>
	<insert id="insertReserve">
		INSERT INTO reserve VALUES(
			#{id},
			#{user_id},
			#{room_group_id},
			#{final_price},
			#{start_date},
			#{end_date},
			<if test="mycoupon_id == null">
			NULL,
			</if>
			<if test="mycoupon_id != null">
			#{mycoupon_id},
			</if>
			#{tid},
			'예약',
			SYSDATE
		)	
	</insert>
	<insert id="insertOptionReserve">
	INSERT INTO option_reserve VALUES(
		option_reserve_seq.nextval,
		#{reserve_id},
		#{option_id}
		)
	</insert>
	<select id="selectReserveByTid" resultType="com.rm.roaming.dto.ReserveDto">
		SELECT * FROM reserve WHERE tid = #{tid} 
	</select>
	
	<select id="selectReserveListByUserId" resultType="com.rm.roaming.dto.ReserveDto">
		SELECT * FROM reserve WHERE user_id = #{user_id} 
		<if test="filter == 1">
			AND	<![CDATA[ TO_DATE(start_date, 'YY/MM/DD') >= TRUNC(SYSDATE) ]]>
		</if>
		<if test="filter == 2">
			AND	<![CDATA[ TO_DATE(start_date, 'YY/MM/DD') < TRUNC(SYSDATE) ]]>
		</if>	
	</select>
	
	<select id="selectOptionReserveList" resultType="com.rm.roaming.dto.OptionReserveDto">
		SELECT * FROM option_reserve WHERE reserve_id = #{reserve_id}
	</select>
	<select id="selectGroupPlusOptionInfo" resultType="com.rm.roaming.dto.GroupPlusOptionDto">
		SELECT * FROM group_plus_option WHERE id = #{id}
	</select>
	
	<select id="selectCountReviewByReserveId" resultType="int">
		SELECT COUNT(*) FROM hotel_review WHERE reserve_id = #{reserve_id}
	</select>
	<insert id="insertReview">
		INSERT INTO hotel_review VALUES(
			hotel_review_seq.nextval,
			#{reserve_id},
			#{content},
			#{star},
			#{review_img_link},
			SYSDATE
		)
	</insert>
	<select id="selectReviewListByHotelId" resultType="com.rm.roaming.dto.HotelReviewDto">
		SELECT * FROM hotel_review WHERE reserve_id IN
		 (SELECT id FROM reserve WHERE room_group_id 
		 IN (SELECT id FROM room_group WHERE hotel_id = #{hotel_id})
		 )
	</select>
	<select id="selectReserveById" resultType="com.rm.roaming.dto.ReserveDto">
		SELECT * FROM reserve WHERE id = #{id}
	</select>
	<select id="selectUserById" resultType="com.rm.roaming.dto.UserDto">
		SELECT * FROM rm_user WHERE id = #{id}
	</select>
	
	<select id="selectMyHotelLikeCount" resultType="int">
		SELECT count(*) FROM hotel_like WHERE hotel_id = #{hotel_id} AND user_id = #{user_id}
	</select>
	<select id="selectTotalHotelLikeCount" resultType="int">
		SELECT count(*) FROM hotel_like WHERE hotel_id = #{hotel_id}
	</select>
	
	<insert id="insertHotelLike">
		INSERT INTO hotel_like VALUES(
			hotel_like_seq.nextval,
			#{user_id},
			#{hotel_id}
		)
	</insert>
	<delete id="deleteHotelLike">
		DELETE hotel_like WHERE hotel_id =#{hotel_id} AND user_id = #{user_id}
	</delete>
	<select id="selectLikeHotelList" resultType="com.rm.roaming.dto.HotelDto">
		SELECT * FROM hotel WHERE id IN (SELECT hotel_id FROM hotel_like WHERE user_id =#{user_id})
	</select>
	
	<select id="selectDayPrice" resultType="com.rm.roaming.dto.DayPriceDto">
	select change_price,room_group_id from
	 day_price 
	 where day=#{day}
	 and room_group_id= (SELECT id FROM (SELECT id FROM room_group WHERE hotel_id = #{hotel_id} ORDER BY price) WHERE ROWNUM = 1)
	</select>
	<select id="selectSeasonPrice" resultType="int">
	<![CDATA[
	select nvl(max(change_price),0) from season_price sp INNER JOIN season_price_group spg ON sp.id= spg.season_price_id 
	WHERE spg.room_group_id = (SELECT id FROM (SELECT id  FROM room_group rg WHERE hotel_id = #{hotel_id} ORDER BY price) WHERE ROWNUM = 1)
	AND sp.start_date <= #{date} AND  #{date} < sp.end_date
	]]>
	</select>
	<select id="selectStarCountByHotel" resultType="int">
		select count(*) from hotel_review 
		WHERE reserve_id IN(select id from reserve 
		WHERE room_group_id IN (select id FROM room_group WHERE hotel_id = #{hotel_id})) 
		AND star = #{star}
	</select>
	<select id="selectGroupDayPrice" resultType="com.rm.roaming.dto.DayPriceDto">
	select change_price,room_group_id from
	 day_price 
	 where day=#{day}
	 and room_group_id= #{id}
	</select>
	
	<select id="selectGroupSeasonPrice" resultType="int">
	<![CDATA[
	select nvl(max(change_price),0) from season_price sp INNER JOIN season_price_group spg ON sp.id= spg.season_price_id 
	WHERE spg.room_group_id = #{id}
	AND sp.start_date <= #{date} AND  #{date} < sp.end_date
	]]>
	</select>
	
		<!-- 상품에 적용할 쿠폰 -->
	<select id="selectByBuyHotelCouponList" resultType="com.rm.roaming.dto.CouponDto">
		SELECT c.id, c.coupon_name,c.coupon_discount
		FROM coupon c
		JOIN userCoupon uc ON uc.coupon_id = c.id
		WHERE c.coupon_context = '숙소'
		  AND uc.status = 'N'
		  AND c.coupon_deleted = 'N'
          AND user_id=#{id}
	</select>
	<select id="selectCouponPercent" resultType="int">
		SELECT coupon_discount FROM coupon WHERE id = #{id}
	</select>
	<update id="useCouponByHotel">
		UPDATE userCoupon  SET status = 'Y' WHERE coupon_id = #{coupon_id} AND user_id = #{user_id}
	</update>
	<select id="selectUseAbleCouponCount1" resultType="int">
		SELECT count(*)
		FROM coupon c
		JOIN userCoupon uc ON uc.coupon_id = c.id
		WHERE c.coupon_context = '숙소'
		  AND uc.status = 'N'
		  AND c.coupon_deleted = 'N'
          AND user_id=#{user_id}
	</select>
	
	<!-- 숙소포인트 사용내역 등록 -->
   <insert id="insertHotelPointStatus">
      INSERT INTO point VALUES(
          point_seq.nextval,
          #{user_id},
          #{point},
          '사용',
          '할인',
          SYSDATE
      )
   </insert>
   <select id="selectReservePointAddCount" resultType="int">
      SELECT count(*) FROM point WHERE  user_id = #{user_id}
       AND context = (SELECT hotel_name FROM hotel WHERE id =  (SELECT hotel_id FROM room_group WHERE id =#{id})) 
       AND TRUNC(reg_date) = TRUNC(sysdate)
   </select>   
   <!-- 숙소포인트 획득내역 등록 -->
   <insert id="insertHotelReservePointStatus">
      INSERT INTO point VALUES(
          point_seq.nextval,
          #{user_id},
          #{point},
          '획득',
          #{hotel_name},
          SYSDATE
      )
   </insert>
   <select id="selectHotelName" resultType="com.rm.roaming.dto.HotelDto">
      SELECT hotel_name FROM hotel WHERE id =  (SELECT hotel_id FROM room_group WHERE id =#{id})
   </select>
   
   <update id="updateReserveCancle">
      UPDATE reserve SET status = '취소' WHERE tid = #{tid}
   </update>
   <insert id="insertHotelReserveCanclePointStatus">
      INSERT INTO point VALUES(
          point_seq.nextval,
          #{user_id},
          #{point},
          '환불',
          '예약 취소',
          SYSDATE
      )
   </insert>
</mapper>